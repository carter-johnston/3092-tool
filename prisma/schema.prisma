generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// running locally -CJ
// delete migration files
// uncomment sqlite data source
// npx migrate dev

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

model Cto3092 {
  id           Int     @id @default(autoincrement())
  groupingName String
  certCardId   String
  certPin      String
  lastName     String
  firstName    String
  addressLine1 String
  addressLine2 String? @default("")
  addressLine3 String? @default("")
  country      String
  dob          String
  homePhone    String? @default("")
  officePhone  String? @default("")
  mobilePhone  String? @default("")
  ssn          String
  email        String
  city         String
  state        String
  zip          String
}

model AuthUser {
  id           String        @id @unique
  username     String
  role         String
  auth_key     AuthKey[]
  auth_session AuthSession[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
